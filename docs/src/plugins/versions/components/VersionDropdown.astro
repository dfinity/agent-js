---
const IS_DEV = import.meta.env.DEV;
const BASE_URL = import.meta.env.BASE_URL;
---

<div>
  <label for="sidebar-version-select" class="sidebar-version-select-label">Version</label>
  <select id="sidebar-version-select" aria-label="Select documentation version"></select>
</div>

<script define:vars={{ IS_DEV, BASE_URL }} is:inline>
    async function initVersionDropdown() {
        const select = document.getElementById('sidebar-version-select');
        if (!select || !(select instanceof HTMLSelectElement)) {
            console.error('No select element found');
            return;
        }

        const currentBase = BASE_URL.endsWith('/') ? BASE_URL : BASE_URL + '/';

        let versions = [];
        if (!IS_DEV) {
            try {
                const versionsUrl = document.getElementsByName('versions-json-path')[0]?.getAttribute('content');
                if (!versionsUrl) {
                    console.error('No versions.json path found');
                    return;
                }
                const res = await fetch(versionsUrl, { cache: 'no-store' });
                if (res.ok) {
                    const data = await res.json();
                    if (Array.isArray(data)) {
                        versions = data;
                    }
                }
            } catch (e) {
                console.error('Error fetching versions.json', e);
            }
        } else {
            versions = [{ path: 'local', label: 'local' }];
        }
    
        const currentVersion = (currentBase.replace(/\/$/, '').split('/').pop() || '').toLowerCase();
        const { pathname, search, hash } = window.location;
    
        select.innerHTML = '';
        for (const v of versions) {
            const newBase = currentBase.replace(/([^/]+)\/$/, `${v.path}/`);
            const href = pathname.replace(currentBase, newBase) + search + hash;
            const opt = document.createElement('option');
            opt.value = href;
            opt.textContent = v.label;
            if (v.path.toLowerCase() === currentVersion) {
                opt.selected = true;
            }
            select.appendChild(opt);
        }
    
        select.addEventListener('change', () => {
            const href = select.value;
            const current = pathname + search + hash;
            if (href && href !== current) {
                window.location.href = href;
            }
        });
    };

    initVersionDropdown();
</script>

<style>
    #sidebar-version-select {
        width: 100%;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
    }
    .sidebar-version-select-label {
        display: block;
        font-size: 0.875rem;
        opacity: 0.9;
        cursor: pointer;
    }
</style>
