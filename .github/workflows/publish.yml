name: Publish and Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  publish:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from branch name
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH#release/}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VERSION_TAG=v$VERSION" >> $GITHUB_ENV
      - name: Mark as Latest Release in GitHub Releases
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          gh release edit "${{ env.VERSION_TAG }}" --draft=false --prerelease=false --latest=true

      - name: Setup PNPM
        uses: dfinity/ci-tools/actions/setup-pnpm@main
        with:
          node_version_file: '.nvmrc'

      - run: pnpm build
      - run: pnpm publish:packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # TODO: remove this step once we migrate to the new docs deployment workflow
      - name: Deploy Docs to Juno satellite
        uses: junobuild/juno-action@main
        with:
          args: deploy --mode production --immediate
        env:
          JUNO_TOKEN: ${{ secrets.JUNO_TOKEN }}
          PROJECT_PATH: docs

  # For now, this job only runs in parallel to test the new docs deployment workflow
  # TODO: make it depend on the publish job once we remove the docs deployment step from the publish job
  publish-docs:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: generate_token
        with:
          app-id: ${{ vars.PR_AUTOMATION_BOT_PUBLIC_APP_ID }}
          private-key: ${{ secrets.PR_AUTOMATION_BOT_PUBLIC_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: icp-js-sdk-docs

      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: dfinity/ci-tools/actions/setup-pnpm@main
        with:
          node_version_file: '.nvmrc'

      - uses: dfinity/ci-tools/actions/extract-version@luca/extract-version-action
        id: extract-version
        with:
          file: 'package.json'

      - name: Prepare version
        id: ver
        run: |
          echo "version=v${{ steps.extract-version.outputs.major }}" >> $GITHUB_OUTPUT

      - name: Build docs for version ${{ steps.ver.outputs.version }}
        working-directory: docs
        env:
          DOCS_VERSION: ${{ steps.ver.outputs.version }}
        run: pnpm build --outDir dist/${{ steps.ver.outputs.version }}

      - name: Build docs for version latest
        working-directory: docs
        env:
          DOCS_VERSION: latest
        run: pnpm build --outDir dist/latest

      - name: Checkout icp-pages branch
        uses: actions/checkout@v4
        with:
          ref: icp-pages
          path: icp-pages

      - name: Assemble docs
        uses: dfinity/ci-tools/actions/assemble-docs@luca/assemble-docs-action
        with:
          docs_output_dir: 'docs/dist'
          docs_version: ${{ steps.ver.outputs.version }}
          docs_version_label: ${{ steps.ver.outputs.version }}
          latest_version_label: 'latest (${{ steps.ver.outputs.version }})'
          icp_pages_dir: 'icp-pages'

      - name: Submit Documentation
        uses: dfinity/ci-tools/actions/submit-docs@main
        with:
          destination_repo: 'dfinity/icp-js-sdk-docs'
          token: ${{ steps.generate_token.outputs.token }}
