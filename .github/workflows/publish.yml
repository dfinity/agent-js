name: Publish and Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  publish:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from branch name
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH#release/}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VERSION_TAG=v$VERSION" >> $GITHUB_ENV
      - name: Mark as Latest Release in GitHub Releases
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          gh release edit "${{ env.VERSION_TAG }}" --draft=false --prerelease=false --latest=true

      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      - run: npm ci
      - run: npm audit
      - run: npm publish -ws
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # publish docs
      - name: Install dfx
        run: dfinity/setup-dfx@main
      - name: Regenerate project's documentation
        run: npm run make:docs
      - name: Add new identity to dfx
        run: |
          echo ${{ secrets.DFX_IDENTITY_PEM }} > identity.pem
          dfx identity import docs-deployer identity.pem
          dfx identity use docs-deployer
      - name: Deploy docs
        run: dfx deploy --network ic

      - name: Delete release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin --delete ${{ env.BRANCH }}
