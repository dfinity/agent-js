import { AnonymousIdentity, SignIdentity } from '@dfinity/agent';
import {
  BootstrapChangeIdentityCommand,
  BootstrapChangeIdentityCommandIdentifier,
  Ed25519KeyIdentity,
} from '@dfinity/authentication';
import { EventIterable } from '../../dom-events';
import { ChangeCommandEventIdentities, ChangeCommandIdentity } from './BootstrapIdentities';

function SampleChangeIdentityCommand() {
  const command1: BootstrapChangeIdentityCommand = {
    type: 'https://internetcomputer.org/ns/dfinity/bootstrap/ChangeIdentityCommand',
    detail: {
      authenticationResponse:
        'http://localhost:8000/?canisterId=rrkah-fqaaa-aaaaa-aaaaq-cai&access_token=7b2264656c65676174696f6e73223a5b7b2264656c65676174696f6e223a7b2265787069726174696f6e223a2231363631353131643364616430393830222c227075626b6579223a2233303261333030353036303332623635373030333231303030343433303064343038343432386433323266336432313932303762643930356365613139613931336236653832376432656565313666383161393137353161222c2274617267657473223a5b223030303030303030303030303030303030313031225d7d2c227369676e6174757265223ad5d2c227075626c69634b6579223a22333035653330306330363061326230363031303430313833623834333031303130333465303061353031303230333236323030313231353832306538626464303939333365383130313962346163626531373330316163366363643066356462386464383932323637656531386236323065363033626561363332323538323039623132356366316232663233616234323739366131656538383333366461653234346436643830353866336331393264316661373962316430356666343733227d&expires_in=10000000&token_type=bearer&scope=rwlgt-iiaaa-aaaaa-aaaaa-cai',
      identity: {
        sign: challenge => Ed25519KeyIdentity.generate().sign(challenge),
      },
    },
  };
  return command1;
}

test('BootstrapIdentities', async () => {
  const command1: BootstrapChangeIdentityCommand = SampleChangeIdentityCommand();
  const changeCommands: BootstrapChangeIdentityCommand[] = [command1];
  const identities = changeCommands.map(ChangeCommandIdentity);
  expect(identities.length).toEqual(1);
  const identity1 = identities[0];
  expect(identity1.getPublicKey().toDer().toString('hex')).toEqual(
    '305e300c060a2b0601040183b8430101034e00a5010203262001215820e8bdd09933e81019b4acbe17301ac6ccd0f5db8dd892267ee18b620e603bea632258209b125cf1b2f23ab42796a1ee88336dae244d6d8058f3c192d1fa79b1d05ff473',
  );
});

test('BootstrapIdentities dom-events', async () => {
  const el = document.createElement('div');
  const iteratedIdentities: Array<AnonymousIdentity | SignIdentity> = [];
  const identities = ChangeCommandEventIdentities(
    EventIterable(el, BootstrapChangeIdentityCommandIdentifier),
  );
  (async () => {
    for await (const i of identities) {
      iteratedIdentities.push(i);
    }
  })();
  const changeCommand: BootstrapChangeIdentityCommand = SampleChangeIdentityCommand();
  el.dispatchEvent(
    new CustomEvent(changeCommand.type, {
      detail: changeCommand.detail,
      bubbles: true,
      composed: true,
    }),
  );
  await new Promise(setImmediate);
  expect(iteratedIdentities.length).toEqual(1);
});

test('ChangeCommandIdentity builds identity from authenticationResponse contained in URL hash fragment', () => {
  const authenticationResponseBaseUri = 'http://localhost:8000/'
  const authenticationResponseUrlEncoded = 'canisterId=rrkah-fqaaa-aaaaa-aaaaq-cai&access_token=7b2264656c65676174696f6e73223a5b7b2264656c65676174696f6e223a7b2265787069726174696f6e223a2231363631353131643364616430393830222c227075626b6579223a2233303261333030353036303332623635373030333231303030343433303064343038343432386433323266336432313932303762643930356365613139613931336236653832376432656565313666383161393137353161222c2274617267657473223a5b223030303030303030303030303030303030313031225d7d2c227369676e6174757265223ad5d2c227075626c69634b6579223a22333035653330306330363061326230363031303430313833623834333031303130333465303061353031303230333236323030313231353832306538626464303939333365383130313962346163626531373330316163366363643066356462386464383932323637656531386236323065363033626561363332323538323039623132356366316232663233616234323739366131656538383333366461653234346436643830353866336331393264316661373962316430356666343733227d&expires_in=10000000&token_type=bearer&scope=rwlgt-iiaaa-aaaaa-aaaaa-cai';
  const expectedPublicKeyDerHex = '305e300c060a2b0601040183b8430101034e00a5010203262001215820e8bdd09933e81019b4acbe17301ac6ccd0f5db8dd892267ee18b620e603bea632258209b125cf1b2f23ab42796a1ee88336dae244d6d8058f3c192d1fa79b1d05ff473';
  const responseWithHashFragment = `${authenticationResponseBaseUri}#${authenticationResponseUrlEncoded}`;
  const responseWithQueryString = `${authenticationResponseBaseUri}?${authenticationResponseUrlEncoded}`;
  const makeCommand = (authenticationResponse: string): BootstrapChangeIdentityCommand => ({
    type: 'https://internetcomputer.org/ns/dfinity/bootstrap/ChangeIdentityCommand',
    detail: {
      authenticationResponse,
      identity: {
        sign: challenge => Ed25519KeyIdentity.generate().sign(challenge),
      },
    },
  });

  const identityFromHashFragment = ChangeCommandIdentity(makeCommand(responseWithHashFragment));
  expect(identityFromHashFragment.getPublicKey().toDer().toString('hex')).toEqual(expectedPublicKeyDerHex);

  const identityFromQueryString = ChangeCommandIdentity(makeCommand(responseWithQueryString));
  expect(identityFromQueryString.getPublicKey().toDer().toString('hex')).toEqual(expectedPublicKeyDerHex);
});
