// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`error logs for bad signature should throw call errors if provided an invalid signature 1`] = `"{"message":"Error while making call: Server returned an error:\\n  Code: 400 (Bad Request)\\n  Body: Invalid signature: Invalid basic signature: Ed25519 signature could not be verified: public key 3b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29, signature 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, error: A signature was invalid\\n\\n","level":"error","error":{"name":"AgentCallError","response":{"name":"AgentError","response":{"ok":false,"status":400,"statusText":"Bad Request","headers":[[0,["access-control-allow-origin","*"]],[1,["content-length","332"]],[2,["content-type","text/plain; charset=utf-8"]],[3,["date","Fri, 31 Jan 2025 18:53:47 GMT"]]]}},"requestId":"a920e72ef37aeffac8fa8d8d11a85886e6fea2490446a19b4a62568cd51a4f70","senderPubkey":"302a300506032b65700321003b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29","senderSig":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","ingressExpiry":"1738362720000000000"}}"`;

exports[`error logs for bad signature should throw query errors for bad signature 1`] = `"{"message":"Error while making call: fetchResponse.text is not a function","level":"error","error":{"name":"AgentQueryError","response":{},"requestId":"[object ArrayBuffer]","senderPubkey":"302a300506032b65700321003b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29","senderSig":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","ingressExpiry":"1738362720000000000"}}"`;

exports[`error logs for bad signature should throw query errors for bad signature 2`] = `"{"message":"Error while making call: fetchResponse.text is not a function","level":"error","error":{"name":"AgentQueryError","response":{},"requestId":"[object ArrayBuffer]","senderPubkey":"302a300506032b65700321003b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29","senderSig":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","ingressExpiry":"1738362720000000000"}}"`;

exports[`error logs for bad signature should throw re errors for bad signature 1`] = `"{"message":"Error while making call: fetchResponse.text is not a function","level":"error","error":{"name":"AgentQueryError","response":{},"requestId":"[object ArrayBuffer]","senderPubkey":"302a300506032b65700321003b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29","senderSig":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","ingressExpiry":"1738362720000000000"}}"`;

exports[`error logs for bad signature should throw read_state errors for bad signature 1`] = `"{"message":"Error while making call: fetchResponse.text is not a function","level":"error","error":{"name":"AgentQueryError","response":{},"requestId":"[object ArrayBuffer]","senderPubkey":"302a300506032b65700321003b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29","senderSig":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","ingressExpiry":"1738362720000000000"}}"`;

exports[`it should handle calls against the ic-management canister that succeed 1`] = `
{
  "cycles": 3092219247033n,
  "idle_cycles_burned_per_day": 1808810n,
  "memory_size": 2301012n,
  "module_hash": [
    Uint8Array [
      254,
      155,
      232,
      199,
      49,
      146,
      52,
      52,
      57,
      201,
      131,
      209,
      77,
      162,
      243,
      122,
      89,
      50,
      105,
      40,
      93,
      49,
      15,
      210,
      193,
      29,
      73,
      112,
      229,
      241,
      110,
      182,
    ],
  ],
  "query_stats": {
    "num_calls_total": 0n,
    "num_instructions_total": 0n,
    "request_payload_bytes_total": 0n,
    "response_payload_bytes_total": 0n,
  },
  "reserved_cycles": 0n,
  "settings": {
    "compute_allocation": 0n,
    "controllers": [
      {
        "__principal__": "2vxsx-fae",
      },
      {
        "__principal__": "bnz7o-iuaaa-aaaaa-qaaaa-cai",
      },
      {
        "__principal__": "jhnlf-yu2dz-v7beb-c77gl-76tj7-shaqo-5qfvi-htvel-gzamb-bvzx6-yqe",
      },
    ],
    "freezing_threshold": 2592000n,
    "log_visibility": {
      "controllers": null,
    },
    "memory_allocation": 0n,
    "reserved_cycles_limit": 5000000000000n,
    "wasm_memory_limit": 0n,
  },
  "status": {
    "running": null,
  },
}
`;

exports[`retry failures should succeed after multiple failures within the configured limit 1`] = `
{
  "requestDetails": undefined,
  "requestId": ArrayBuffer [],
  "response": {
    "body": null,
    "headers": [],
    "ok": true,
    "status": 200,
    "statusText": "success!",
  },
}
`;
