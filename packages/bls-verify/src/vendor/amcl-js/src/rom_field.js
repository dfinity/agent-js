/*
 * Copyright (c) 2012-2020 MIRACL UK Ltd.
 *
 * This file is part of MIRACL Core
 * (see https://github.com/miracl/core).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Fixed Data in ROM - Field and Curve parameters */

var ROM_FIELD_25519,
  ROM_FIELD_256PM,
  ROM_FIELD_384PM,
  ROM_FIELD_512PM,
  ROM_FIELD_ANSSI,
  ROM_FIELD_BLS12383,
  ROM_FIELD_BLS24479,
  ROM_FIELD_BLS48556,
  ROM_FIELD_BLS48286,
  ROM_FIELD_BLS48581,
  ROM_FIELD_BLS12381,
  ROM_FIELD_BLS12461,
  ROM_FIELD_BN462,
  ROM_FIELD_FP256BN,
  ROM_FIELD_FP512BN,
  ROM_FIELD_BN254,
  ROM_FIELD_BN254CX,
  ROM_FIELD_BRAINPOOL,
  ROM_FIELD_C41417,
  ROM_FIELD_C1174,
  ROM_FIELD_C1665,
  ROM_FIELD_MDC,
  ROM_FIELD_GOLDILOCKS,
  ROM_FIELD_HIFIVE,
  ROM_FIELD_NIST256,
  ROM_FIELD_NIST384,
  ROM_FIELD_NIST521,
  ROM_FIELD_SECP256K1,
  ROM_FIELD_SECP160R1,
  ROM_FIELD_SM2,
  ROM_FIELD_JUBJUB,
  ROM_FIELD_TWEEDLEDUM,
  ROM_FIELD_TWEEDLEDEE;

ROM_FIELD_25519 = function () {
  'use strict';

  var ROM_FIELD_25519 = {
    // 25519 Curve Modulus
    Modulus: [
      0xffffed, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0x7fff,
    ],
    ROI: [
      0xea0b0, 0x1b274a, 0x78c4ee, 0xad2fe4, 0x431806, 0xd7a72f, 0x993dfb, 0x2b4d00, 0xc1df0b,
      0x24804f, 0x2b83,
    ],
    R2modp: [0xa40000, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
    MConst: 0x13,
  };
  return ROM_FIELD_25519;
};

ROM_FIELD_256PM = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_256PM = {
    // NUMS256 Curve Modulus
    // Base Bits= 24
    Modulus: [
      0xffff43, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0xffff,
    ],
    ROI: [
      0xffff42, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0xffff,
    ],
    R2modp: [0x890000, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
    MConst: 0xbd,
  };
  return ROM_FIELD_256PM;
};

ROM_FIELD_384PM = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_384PM = {
    // NUMS384 Curve Modulus
    // Base Bits= 23
    Modulus: [
      0x7ffec3, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0xffff,
    ],
    ROI: [
      0x7ffec2, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0xffff,
    ],
    R2modp: [
      0x224000, 0xc4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    ],
    MConst: 0x13d,
  };
  return ROM_FIELD_384PM;
};

ROM_FIELD_512PM = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_512PM = {
    // NUMS512 Curve Modulus
    // Base Bits= 23
    Modulus: [
      0x7ffdc7, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3f,
    ],
    ROI: [
      0x7ffdc6, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3f,
    ],
    R2modp: [
      0x0, 0x58800, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0,
    ],
    MConst: 0x239,
  };
  return ROM_FIELD_512PM;
};

ROM_FIELD_ANSSI = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_ANSSI = {
    // ANSSI modulus
    // Base Bits= 24
    Modulus: [
      0x6e9c03, 0xf353d8, 0x6de8fc, 0xabc8ca, 0x61adbc, 0x435b39, 0xe8ce42, 0x10126d, 0x3ad58f,
      0x178c0b, 0xf1fd,
    ],
    ROI: [
      0x6e9c02, 0xf353d8, 0x6de8fc, 0xabc8ca, 0x61adbc, 0x435b39, 0xe8ce42, 0x10126d, 0x3ad58f,
      0x178c0b, 0xf1fd,
    ],
    R2modp: [
      0xacece3, 0x924166, 0xb10fce, 0x6cfbb6, 0x87ec2, 0x3de43d, 0xd2cf67, 0xa67dde, 0xad30f2,
      0xbcaae, 0xdf98,
    ],
    MConst: 0x4e1155,
  };
  return ROM_FIELD_ANSSI;
};

ROM_FIELD_BLS12383 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS12383 = {
    // BLS12383 Modulus
    // Base Bits= 23
    Modulus: [
      0x2ab0ab, 0x3ac90b, 0x2f68dc, 0x532429, 0x43f298, 0x1e8f51, 0x5a5849, 0x18dc00, 0x2511ac,
      0x59e6cb, 0x2b518, 0x549425, 0x5c41fe, 0x340db5, 0x2adbad, 0x2b4ab2, 0x5565,
    ],
    ROI: [
      0x2ab0aa, 0x3ac90b, 0x2f68dc, 0x532429, 0x43f298, 0x1e8f51, 0x5a5849, 0x18dc00, 0x2511ac,
      0x59e6cb, 0x2b518, 0x549425, 0x5c41fe, 0x340db5, 0x2adbad, 0x2b4ab2, 0x5565,
    ],
    R2modp: [
      0x250a44, 0x68f66f, 0xe3c74, 0x791772, 0x3525e3, 0xe1e15, 0x356616, 0x54f624, 0x508069,
      0x272663, 0x4a4cb0, 0x359293, 0x5b6573, 0x9f27f, 0x5ea3b4, 0x60fd2d, 0x5167,
    ],
    MConst: 0x3435fd,
    SQRTm3: [
      0x2ad4a8, 0x6277af, 0x677d3e, 0x5ad233, 0x7add9b, 0x31dfb7, 0x401708, 0x395349, 0x3da818,
      0x7988aa, 0x7fed10, 0x3ff320, 0xc3ede, 0x7403b5, 0x2adbac, 0x2b4ab2, 0x5565,
    ],
    CRu: [
      0x2ac2a9, 0x4ea05d, 0x4b730d, 0x16fb2e, 0x5f681a, 0x683784, 0xd37a8, 0x2917a5, 0x715ce2,
      0x69b7ba, 0x15114, 0x4a43a3, 0x34406e, 0x1408b5, 0x2adbad, 0x2b4ab2, 0x5565,
    ],
    Fra: [
      0x11dac1, 0x2e5a66, 0x614b, 0x733b9f, 0x13480f, 0x19146d, 0x395436, 0x2b3a25, 0x1a8682,
      0x247f74, 0x3931b3, 0x5a9788, 0x7c2c11, 0x67173, 0x1fda2f, 0x6adf81, 0x22ac,
    ],
    Frb: [
      0x18d5ea, 0xc6ea5, 0x2f0791, 0x5fe88a, 0x30aa88, 0x57ae4, 0x210413, 0x6da1db, 0xa8b29,
      0x356757, 0x498365, 0x79fc9c, 0x6015ec, 0x2d9c41, 0xb017e, 0x406b31, 0x32b8,
    ],
  };

  return ROM_FIELD_BLS12383;
};

ROM_FIELD_BLS24479 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS24479 = {
    // BLS24479 Modulus
    // Base Bits= 23

    Modulus: [
      0x6152b, 0x2ce94, 0x6be113, 0x416986, 0x2ffe2e, 0x36d4c8, 0x47172f, 0x1945b7, 0x5f068a,
      0xe6441, 0x110186, 0x4f0f9, 0x33568e, 0x4a0f2e, 0x306ea0, 0x173bf2, 0x6e803f, 0x735d8,
      0x3316ea, 0x3c01e, 0x555c0,
    ],
    ROI: [
      0x6152a, 0x2ce94, 0x6be113, 0x416986, 0x2ffe2e, 0x36d4c8, 0x47172f, 0x1945b7, 0x5f068a,
      0xe6441, 0x110186, 0x4f0f9, 0x33568e, 0x4a0f2e, 0x306ea0, 0x173bf2, 0x6e803f, 0x735d8,
      0x3316ea, 0x3c01e, 0x555c0,
    ],
    R2modp: [
      0x22d6fa, 0x7aa299, 0x4c307e, 0x68e711, 0x7da4ae, 0x383cc3, 0x12048c, 0x11b7d, 0x3ca412,
      0x2ce421, 0x4932ac, 0x27a306, 0x340b6a, 0x666e, 0x3f6575, 0x2f823c, 0xa0de6, 0x137ec5,
      0x37d4bc, 0x48a54e, 0x4c28b,
    ],
    MConst: 0x15fe7d,
    SQRTm3: [
      0x291428, 0x198323, 0x663cce, 0x7745ac, 0x1747e3, 0x5222a9, 0x41f479, 0x54b5f9, 0x1861bc,
      0xde532, 0x2be5aa, 0x1e67ea, 0x5cb732, 0x67ab99, 0xb7c9f, 0x71250d, 0x741800, 0x26db7,
      0x2b165a, 0x3c01e, 0x555c0,
    ],
    CRu: [
      0x5794a9, 0x4e28db, 0x690ef0, 0x1c5799, 0x63a309, 0x447bb8, 0x4485d4, 0x36fdd8, 0x7bb423,
      0xe24b9, 0x5e7398, 0x11ac71, 0x806e0, 0x18dd64, 0x5df5a0, 0x4307f, 0x314c20, 0x4d1c8,
      0x2f16a2, 0x3c01e, 0x555c0,
    ],
    Fra: [
      0x796f1d, 0x4e9577, 0x6eb572, 0x68637f, 0x41ff8b, 0x46e8d3, 0x7a7898, 0x7c72a4, 0x248407,
      0x6e79d9, 0x56499e, 0x4eb47f, 0x27cbd6, 0x33c662, 0x4e9746, 0xc2798, 0x397549, 0x4a5b1b,
      0x5c90b6, 0x3dca73, 0x4bbc8,
    ],
    Frb: [
      0xca60e, 0x34391c, 0x7d2ba0, 0x590606, 0x6dfea2, 0x6febf4, 0x4c9e96, 0x1cd312, 0x3a8282,
      0x1fea68, 0x3ab7e7, 0x363c79, 0xb8ab7, 0x1648cc, 0x61d75a, 0xb1459, 0x350af6, 0x3cdabd,
      0x568633, 0x45f5aa, 0x99f7,
    ],
    TWK: [
      0x6a62f3, 0x12416d, 0x735296, 0x62f9eb, 0x1cb389, 0x794c37, 0x37ddda, 0x7acf76, 0x6a6d51,
      0x1625bc, 0x7c5536, 0x518cd7, 0x3e1bc9, 0x47ce1f, 0x8c33b, 0xc7722, 0x62935e, 0x40f556,
      0x4ed046, 0x133767, 0x337a3,
    ],
  };

  return ROM_FIELD_BLS24479;
};

ROM_FIELD_BLS48581 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS48581 = {
    // Base Bits= 23
    Modulus: [
      0x65912b, 0x2a9cca, 0x30fb70, 0x525245, 0x7df721, 0x414af1, 0x4c5c3b, 0x33d2a8, 0x5af683,
      0x1e8e6d, 0x34c0e5, 0x1566ce, 0x2f6e08, 0x115c87, 0x551129, 0x78f9cb, 0x3be6c0, 0x426376,
      0x3e3448, 0x2b742, 0x7012a0, 0x1c63a8, 0x4c4e09, 0x79a3b7, 0xf73f, 0x25,
    ],
    ROI: [
      0x65912a, 0x2a9cca, 0x30fb70, 0x525245, 0x7df721, 0x414af1, 0x4c5c3b, 0x33d2a8, 0x5af683,
      0x1e8e6d, 0x34c0e5, 0x1566ce, 0x2f6e08, 0x115c87, 0x551129, 0x78f9cb, 0x3be6c0, 0x426376,
      0x3e3448, 0x2b742, 0x7012a0, 0x1c63a8, 0x4c4e09, 0x79a3b7, 0xf73f, 0x25,
    ],
    R2modp: [
      0x4e2506, 0x1fad8c, 0x618be7, 0x23e9bf, 0x6a8ad9, 0x3529c9, 0xb64d9, 0x1c7a8e, 0x759816,
      0x2ae889, 0x3b1f74, 0x53d536, 0x7cff54, 0x389ee8, 0x4f41f1, 0x2c5d2d, 0x48d19d, 0x6c88a7,
      0x7b224e, 0x3b0db8, 0x3bdcf8, 0x83abf, 0x5b548e, 0x50a9d7, 0x362f43, 0x10,
    ],
    MConst: 0x1d5a7d,
    SQRTm3: [
      0x565a0a, 0x3f8543, 0x6fd47b, 0x496c66, 0x62daa2, 0x3ac2da, 0x11e09a, 0x92089, 0x3f8ad7,
      0x4ba795, 0x1335b0, 0x35ae9f, 0x48e9b1, 0x12c1dd, 0xedce, 0x21fa85, 0x6fed43, 0x4cc86e,
      0x6b8186, 0x7dc492, 0x2bffd8, 0x451bd5, 0x24231a, 0x4d3b00, 0xf73f, 0x25,
    ],
    CRu: [
      0x479b90, 0x358bc3, 0x20937a, 0x4472ef, 0x4d8e3f, 0x43440b, 0x5d3dd0, 0x15590f, 0xdb5d6,
      0x29736c, 0x50c59a, 0x2fdc17, 0x73422b, 0x3f4d54, 0x2a11ad, 0x6b7fa3, 0x65fcbe, 0x7acd83,
      0x695960, 0x427957, 0x620963, 0x2ba3e9, 0x541577, 0x16345b, 0x0, 0x0,
    ],
    Fra: [
      0x2aeb25, 0x6d9fc8, 0x7e58ba, 0x3b0569, 0x341942, 0x3d9c9b, 0x15c1c5, 0x7d3ef9, 0x208ac0,
      0x6ef6a2, 0x106240, 0x1f0e46, 0x684849, 0x3030fc, 0xc1f8a, 0x317a4b, 0x4afd6b, 0xe81c7,
      0xf9e16, 0x6823cc, 0x5f6067, 0x7ce7ca, 0x69d735, 0x280a4f, 0x7d30db, 0x1,
    ],
    Frb: [
      0x2aeb25, 0x6d9fc8, 0x7e58ba, 0x3b0569, 0x341942, 0x3d9c9b, 0x15c1c5, 0x7d3ef9, 0x208ac0,
      0x6ef6a2, 0x106240, 0x1f0e46, 0x684849, 0x3030fc, 0xc1f8a, 0x317a4b, 0x4afd6b, 0xe81c7,
      0xf9e16, 0x6823cc, 0x5f6067, 0x7ce7ca, 0x69d735, 0x280a4f, 0x7d30db, 0x1,
    ],
    TWK: [
      0x426953, 0x67a4be, 0xf5ed0, 0x11dcc3, 0x2ce459, 0x6fc2c1, 0x77e8b4, 0x46145d, 0x7b4bc1,
      0x7f9915, 0x313d8b, 0x497801, 0x661b43, 0x428f02, 0x1fa546, 0x231769, 0x3b8532, 0x614cd0,
      0x281d59, 0x4dd09c, 0x6aeb8c, 0x39bbb3, 0x1d5da, 0x1bde08, 0x3a65a5, 0x0,
    ],
  };

  return ROM_FIELD_BLS48581;
};

ROM_FIELD_BLS48556 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS48556 = {
    // BLS48556 Modulus
    // Base Bits= 23

    Modulus: [
      0x76ac0b, 0x4c1ff9, 0x67bbdb, 0x5330ef, 0x167009, 0x450805, 0x61c350, 0x609bd4, 0x76b2e,
      0x40410d, 0x169054, 0x353e01, 0x141301, 0x66f371, 0x3b355a, 0x6d4a85, 0x36f405, 0x28840a,
      0x454ab3, 0x2b6433, 0x29047a, 0xb646e, 0xbff3f, 0x68bec2, 0xf,
    ],
    ROI: [
      0x76ac0a, 0x4c1ff9, 0x67bbdb, 0x5330ef, 0x167009, 0x450805, 0x61c350, 0x609bd4, 0x76b2e,
      0x40410d, 0x169054, 0x353e01, 0x141301, 0x66f371, 0x3b355a, 0x6d4a85, 0x36f405, 0x28840a,
      0x454ab3, 0x2b6433, 0x29047a, 0xb646e, 0xbff3f, 0x68bec2, 0xf,
    ],
    R2modp: [
      0x5f42c2, 0x596e88, 0x2ed8fa, 0x15c970, 0x2518b4, 0x2a75e7, 0x62ce53, 0x431c50, 0x3cf507,
      0x620e44, 0xd6fcd, 0x21a7d, 0x1fda3f, 0x6a099, 0x53487, 0x53eebf, 0x54e2d0, 0x48437d,
      0x2233d8, 0x63296f, 0x21ee21, 0x611417, 0x619d35, 0x13a61a, 0xb,
    ],
    MConst: 0x5a805d,
    SQRTm3: [
      0x9c48, 0x6dd9b9, 0x4445d6, 0x401e84, 0x5f13b, 0x5b1ce6, 0x3c70c7, 0x798d07, 0x7e0544,
      0x62ca1b, 0x75113, 0x557bb6, 0x3a11f4, 0x1426f2, 0x27ef0c, 0x1763b3, 0x7ee9f8, 0x3cf4db,
      0x4cdb7e, 0x6bf8c, 0x263a76, 0x3d63a0, 0x5bbf38, 0x68bec1, 0xf,
    ],
    CRu: [
      0x3ba429, 0x1cfcd9, 0x1600d9, 0x49a7ba, 0x4e30a2, 0x101275, 0xf1a0c, 0x6d146e, 0x42b839,
      0x118594, 0x4ef0b4, 0x55cdb, 0x67127b, 0x3d8d31, 0x319233, 0x2571c, 0x1aeeff, 0x72bc73,
      0x91318, 0x1911e0, 0x279f78, 0x646407, 0x73df3b, 0x68bec1, 0xf,
    ],
    Fra: [
      0x25bf89, 0x79fb26, 0x56f988, 0x399a14, 0x507ea3, 0x77995, 0x3ee83a, 0x52eca9, 0x3e3474,
      0x5f1e13, 0x2e7cb0, 0x255f3d, 0x3ae7f8, 0x2e4ef6, 0x3bde94, 0x7b05a, 0x13c83c, 0x7bf664,
      0x1ff27f, 0x6fe082, 0x3b36ce, 0x138113, 0x6e2002, 0x4c5c03, 0x2,
    ],
    Frb: [
      0x25bf89, 0x79fb26, 0x56f988, 0x399a14, 0x507ea3, 0x77995, 0x3ee83a, 0x52eca9, 0x3e3474,
      0x5f1e13, 0x2e7cb0, 0x255f3d, 0x3ae7f8, 0x2e4ef6, 0x3bde94, 0x7b05a, 0x13c83c, 0x7bf664,
      0x1ff27f, 0x6fe082, 0x3b36ce, 0x138113, 0x6e2002, 0x4c5c03, 0x2,
    ],
    TWK: [
      0x6f9937, 0x4f5442, 0x12b489, 0x31b13f, 0xbd341, 0x4006d0, 0x7a84d9, 0x4dd830, 0x6d4c49,
      0x59d972, 0x1a71ca, 0x687e1, 0x40c8dc, 0x206554, 0x5de9a7, 0x2817c7, 0x6556ed, 0x27c11a,
      0x3ec6ef, 0x764e01, 0x6dd577, 0x7cffdd, 0x246857, 0x1907ce, 0x4,
    ],
  };

  return ROM_FIELD_BLS48556;
};

ROM_FIELD_BLS48286 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS48286 = {
    // BLS48286 Modulus
    // Base Bits= 23

    Modulus: [
      0x1c345b, 0x57241, 0x3679d4, 0x1471a9, 0x641c45, 0x1355e, 0x6b012, 0x36463f, 0x145a8,
      0x604039, 0x31ef5e, 0x16298f, 0x297,
    ],
    R2modp: [
      0x116bcb, 0x4a9ce9, 0xd861f, 0x5ca282, 0x66469, 0x30c42d, 0x299fc6, 0x442c07, 0x1735e0,
      0x516724, 0x325ec8, 0x294de1, 0x35,
    ],
    ROI: [
      0x1c345a, 0x57241, 0x3679d4, 0x1471a9, 0x641c45, 0x1355e, 0x6b012, 0x36463f, 0x145a8,
      0x604039, 0x31ef5e, 0x16298f, 0x297,
    ],
    SQRTm3: [
      0x524a9c, 0x48e5cc, 0x66335e, 0xe9944, 0x35b814, 0x1d666a, 0x269c21, 0x4bac4c, 0x2987b9,
      0x614644, 0x63d761, 0xe12a3, 0x297,
    ],
    CRu: [
      0x773f7b, 0x272c06, 0xe5699, 0x518577, 0x4cea2c, 0x4f4de4, 0x56a619, 0xf945, 0x5566b1,
      0x20c33e, 0x4ae360, 0x121e19, 0x297,
    ],
    MConst: 0x6a242d,
    Fra: [
      0x490183, 0x52be7f, 0x4dbaa1, 0xde9f4, 0x556bed, 0x6134f8, 0x3c09a3, 0x1ec81f, 0x2fe004,
      0x1d15d8, 0x48b045, 0x20bf62, 0xd9,
    ],
    Frb: [
      0x5332d8, 0x32b3c1, 0x68bf32, 0x687b4, 0xeb058, 0x200066, 0x4aa66e, 0x177e1f, 0x5165a4,
      0x432a60, 0x693f19, 0x756a2c, 0x1bd,
    ],
    TWK: [
      0x505dcc, 0x2e6b87, 0x2e69f6, 0x2a1538, 0x197054, 0x458d43, 0x4532ea, 0x7de65e, 0x367221,
      0x233e6e, 0x1228cd, 0x76f7a, 0x1d2,
    ],
  };

  return ROM_FIELD_BLS48286;
};

ROM_FIELD_BN462 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BN462 = {
    // Base Bits= 23
    Modulus: [
      0x138013, 0x601080, 0x9006, 0x0, 0x7f6400, 0xdfed0, 0x3fd9bf, 0x7ffffb, 0xfffff, 0x39004,
      0x4a423d, 0x6c0, 0x0, 0x37f940, 0x3dadf6, 0x7b7f86, 0x7fffff, 0x47fff, 0x580480, 0x202401,
      0x2,
    ],
    ROI: [
      0x138012, 0x601080, 0x9006, 0x0, 0x7f6400, 0xdfed0, 0x3fd9bf, 0x7ffffb, 0xfffff, 0x39004,
      0x4a423d, 0x6c0, 0x0, 0x37f940, 0x3dadf6, 0x7b7f86, 0x7fffff, 0x47fff, 0x580480, 0x202401,
      0x2,
    ],
    R2modp: [
      0x8b8d, 0x7265c, 0x56003a, 0xe1112, 0x275149, 0x50bff0, 0x1e3e2e, 0x2dedf3, 0x43d666,
      0x644751, 0x2a7239, 0x1dca94, 0x5f2ff8, 0x41cff0, 0x41494f, 0x34b04a, 0x47932f, 0x5e4bbc,
      0x50bc6, 0x30f0fb, 0x1,
    ],
    MConst: 0x1bb5e5,
    SQRTm3: [
      0x210022, 0x1980, 0x9009, 0x0, 0x7ef800, 0x60fe25, 0x3fd2fe, 0x7ffffb, 0x2fffff, 0x4f806,
      0x5102bb, 0x6c0, 0x0, 0x5ff700, 0x7d77f4, 0x7b7f81, 0x7fffff, 0x47fff, 0x580480, 0x202401,
      0x2,
    ],
    CRu: [
      0x1a401a, 0x701500, 0x9007, 0x0, 0x3f2e00, 0x777e7b, 0x3fd65e, 0x7ffffb, 0x1fffff, 0x44405,
      0x4da27c, 0x6c0, 0x0, 0x4bf820, 0x1d92f5, 0x7b7f84, 0x7fffff, 0x47fff, 0x580480, 0x202401,
      0x2,
    ],
    Fra: [
      0x575d1a, 0x7c7fe4, 0x6f7b92, 0x44b2ce, 0xfc7d, 0x27f423, 0x517476, 0x3c6c86, 0x3310cc,
      0xac42e, 0x3551f0, 0x3c9282, 0x7e11c, 0x207535, 0x2164bb, 0x8b938, 0x35a8cc, 0x179fb,
      0x5232ed, 0xb7fa1, 0x0,
    ],
    Frb: [
      0x5ff85b, 0x15c12a, 0x2d8881, 0x432bdf, 0x90238, 0x2c6144, 0x653d2f, 0x786807, 0x27a84f,
      0x362943, 0x2c76eb, 0x6c72, 0x685f7b, 0x794003, 0x6c9d24, 0x5b4192, 0x2008e6, 0x21d510,
      0x2503a, 0x1e1bfc, 0x2,
    ],
  };

  return ROM_FIELD_BN462;
};

ROM_FIELD_BLS12381 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS12381 = {
    // BLS12381 Modulus
    // Base Bits= 23

    Modulus: [
      0x7faaab, 0x7fffff, 0x7ee7fb, 0xa9fff, 0x3fffeb, 0x4483d5, 0x3dac3d, 0x186950, 0x12bf67,
      0x9e70a, 0x11dd2e, 0x5d66bb, 0x7b6434, 0x496374, 0x5ff9a6, 0x8f51c, 0x1a01,
    ],
    ROI: [
      0x7faaaa, 0x7fffff, 0x7ee7fb, 0xa9fff, 0x3fffeb, 0x4483d5, 0x3dac3d, 0x186950, 0x12bf67,
      0x9e70a, 0x11dd2e, 0x5d66bb, 0x7b6434, 0x496374, 0x5ff9a6, 0x8f51c, 0x1a01,
    ],
    R2modp: [
      0x40c6e6, 0xe1a28, 0x3d1c6c, 0x6d2448, 0x1bb111, 0x4eafa8, 0x229c8c, 0x4cee55, 0x46d2ad,
      0x7ba87c, 0x708835, 0x2413d1, 0x6702e3, 0x390116, 0xd9e3f, 0x4bd65c, 0x9a3,
    ],
    MConst: 0x7cfffd,
    SQRTm3: [
      0x1aaae, 0x0, 0x6d77ec, 0x69ffff, 0x44fd7e, 0x224c4f, 0x4a2ff2, 0x64c014, 0x22e9ab, 0x6c3ecc,
      0x3e8efd, 0x70819f, 0x156845, 0x319d1b, 0x5ff9a6, 0x8f51c, 0x1a01,
    ],
    CRu: [
      0x7efffe, 0x7fffff, 0x8b807, 0x105000, 0x7d8136, 0x511bc2, 0x79be25, 0x59d49d, 0x77eadd,
      0xed41e, 0x69a718, 0x36728d, 0x72fdf7, 0xbe32c, 0x0, 0x0, 0x0,
    ],
    Fra: [
      0x235fb8, 0x6bdb24, 0x76341d, 0x1f3c09, 0x6a53d6, 0x389ecf, 0x612eae, 0x1221eb, 0x5f4f7b,
      0x7a797a, 0x3f580f, 0x6068f8, 0x6b4202, 0x784637, 0x2ec199, 0x69df81, 0x1904,
    ],
    Frb: [
      0x5c4af3, 0x1424db, 0x8b3de, 0x6b63f6, 0x55ac14, 0xbe505, 0x5c7d8f, 0x64764, 0x336fec,
      0xf6d8f, 0x52851e, 0x7cfdc2, 0x102231, 0x511d3d, 0x31380c, 0x1f159b, 0xfc,
    ],
  };

  return ROM_FIELD_BLS12381;
};

ROM_FIELD_BLS12461 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BLS12461 = {
    // BLS12461 Modulus
    // Base Bits= 23
    Modulus: [
      0x2aaaab, 0x155, 0x2aaab0, 0x2aaa55, 0x55, 0x80004, 0x555fc0, 0x135548, 0x1cc00f, 0x3ff4b8,
      0x2d0aa3, 0x58a424, 0x2cca47, 0x465b17, 0x6f5bc7, 0xa49af, 0x55d694, 0x34aab4, 0x155535,
      0x2aaaaa, 0x1,
    ],
    ROI: [
      0x2aaaaa, 0x155, 0x2aaab0, 0x2aaa55, 0x55, 0x80004, 0x555fc0, 0x135548, 0x1cc00f, 0x3ff4b8,
      0x2d0aa3, 0x58a424, 0x2cca47, 0x465b17, 0x6f5bc7, 0xa49af, 0x55d694, 0x34aab4, 0x155535,
      0x2aaaaa, 0x1,
    ],
    R2modp: [
      0x621498, 0x3b585f, 0x41688, 0x6f780d, 0x17c239, 0x158d8a, 0x491a92, 0x737df1, 0x22a06,
      0x460263, 0x275ff2, 0x5496c3, 0x6d4ad2, 0x3a7b46, 0x3a6323, 0x1723b1, 0x76204b, 0x66fd26,
      0x4e743e, 0x1be66e, 0x0,
    ],
    MConst: 0x7ffffd,
    SQRTm3: [
      0x2aaaae, 0x7ff955, 0x2aaa8f, 0x2aac55, 0x355, 0x440028, 0x54fd80, 0x4d50d6, 0x415095,
      0x7b9ed2, 0x4566e7, 0x514ff0, 0x2ead34, 0x325192, 0x3f33c7, 0xb89b0, 0x51d694, 0x34aab4,
      0x155535, 0x2aaaaa, 0x1,
    ],
    CRu: [
      0x7ffffe, 0x3ff, 0x10, 0x7fff00, 0x7ffe7f, 0x61ffed, 0x311f, 0x630239, 0x6db7bc, 0x622af2,
      0x73d1dd, 0x43aa19, 0x3f0e89, 0xa04c2, 0x581400, 0x7f5fff, 0x1ffff, 0x0, 0x0, 0x0, 0x0,
    ],
    Fra: [
      0x12a3a, 0x2f7f37, 0x3dc4, 0x52cce2, 0x1c6308, 0xb7f14, 0x4381d4, 0x52d328, 0x58d45f,
      0x359c90, 0x1dc2cc, 0x616582, 0x7c61eb, 0x6b11c5, 0x64341c, 0x421b30, 0x4dfefa, 0x3cabc4,
      0x12dfda, 0x172028, 0x1,
    ],
    Frb: [
      0x298071, 0x50821e, 0x2a6ceb, 0x57dd73, 0x639d4c, 0x7c80ef, 0x11ddeb, 0x408220, 0x43ebaf,
      0xa5827, 0xf47d7, 0x773ea2, 0x30685b, 0x5b4951, 0xb27aa, 0x482e7f, 0x7d799, 0x77fef0, 0x2755a,
      0x138a82, 0x0,
    ],
  };

  return ROM_FIELD_BLS12461;
};

ROM_FIELD_FP256BN = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_FP256BN = {
    // FP256BN Modulus
    // Base Bits= 24
    Modulus: [
      0xd33013, 0x2ddbae, 0x82d329, 0x12980a, 0xdc65fb, 0xa49f0c, 0x5eee71, 0x46e5f2, 0xfcf0cd,
      0xffffff, 0xffff,
    ],
    ROI: [
      0xd33012, 0x2ddbae, 0x82d329, 0x12980a, 0xdc65fb, 0xa49f0c, 0x5eee71, 0x46e5f2, 0xfcf0cd,
      0xffffff, 0xffff,
    ],
    R2modp: [
      0x2f4801, 0xf779d1, 0x3e7f6e, 0xb42a3a, 0xc919c9, 0xc26c08, 0x1bb715, 0xca2ed6, 0x54293e,
      0xe578e, 0x78ea,
    ],
    MConst: 0x37e5e5,
    SQRTm3: [
      0x8fc004, 0x199267, 0x451cf1, 0x2f71b0, 0x40b6bf, 0x73d3d5, 0xddca51, 0xd3d42f, 0xfcf0ca,
      0xffffff, 0xffff,
    ],
    CRu: [
      0xa1b807, 0xa24a3, 0x1edb1c, 0xf1932d, 0xcdd79d, 0x18659b, 0x409210, 0x3988e1, 0x1, 0x0, 0x0,
    ],
    Fra: [
      0x943106, 0x328af, 0x8f7476, 0x1e3ab2, 0xa17151, 0x67cf39, 0x8ddb08, 0x2d1a6e, 0x786f35,
      0x7662ca, 0x3d61,
    ],
    Frb: [
      0x3eff0d, 0x2ab2ff, 0xf35eb3, 0xf45d57, 0x3af4a9, 0x3ccfd3, 0xd11369, 0x19cb83, 0x848198,
      0x899d35, 0xc29e,
    ],
  };

  return ROM_FIELD_FP256BN;
};

ROM_FIELD_FP512BN = function () {
  'use strict';

  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_FP512BN = {
    // FP512BN Modulus
    // Base Bits= 23
    Modulus: [
      0x2def33, 0x501245, 0x1ed3ac, 0x7a6323, 0x255ce5, 0x7c322d, 0x2ac8db, 0x4632ef, 0x18b8e4,
      0x3d597d, 0x451b3c, 0x77a2a, 0x3c111b, 0x78177c, 0x32d4c1, 0x5d0ec, 0x7f01c6, 0x7ff3d8,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3f,
    ],
    ROI: [
      0x2def32, 0x501245, 0x1ed3ac, 0x7a6323, 0x255ce5, 0x7c322d, 0x2ac8db, 0x4632ef, 0x18b8e4,
      0x3d597d, 0x451b3c, 0x77a2a, 0x3c111b, 0x78177c, 0x32d4c1, 0x5d0ec, 0x7f01c6, 0x7ff3d8,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3f,
    ],
    R2modp: [
      0x23e65d, 0x575a37, 0x411cd0, 0x295fb3, 0x640669, 0x375c69, 0x92395, 0x738492, 0x780d6d,
      0x1bcd9d, 0x417caa, 0x2dc6fb, 0x7eacfb, 0x327043, 0x7f2fc7, 0xf268c, 0x73d733, 0x2147c9,
      0x2accd3, 0x32eaf8, 0x3b2c1e, 0xd46a2, 0x30,
    ],
    MConst: 0x4c5c05,
    //       SQRTm3: [0x332330,0x505BC6,0x1C3175,0x1D56FC,0x52DE91,0x5E48D,0x345737,0x415677,0x83CB6,0x651720,0x753DC3,0xA8065,0x35CDD1,0x6B9137,0x2960D9,0x24905A,0x7C8EB4,0x7FF3D8,0x7FFFFF,0x7FFFFF,0x7FFFFF,0x7FFFFF,0x3F],
    SQRTm3: [
      0x4463e2, 0x8702c, 0x6b848c, 0x3e4e58, 0x37724d, 0x287986, 0x346054, 0x415677, 0x83cb6,
      0x651720, 0x753dc3, 0xa8005, 0x35cdd1, 0x6b9137, 0x2960d9, 0x24905a, 0x7c8eb4, 0x7ff3d8,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3f,
    ],
    CRu: [
      0x79298a, 0x2c4138, 0x52c1c, 0x5c58be, 0x6e6799, 0x1255d9, 0x2f9498, 0x43c4b3, 0x507acd,
      0x11384e, 0x1d2c80, 0x8fd18, 0x78ef76, 0x71d459, 0x2e1acd, 0x1530a3, 0x7dc83d, 0x7ff3d8,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3f,
    ],
    Fra: [
      0x373ab2, 0x2f63e9, 0x47d258, 0x101576, 0x1514f6, 0x503c2e, 0x34ef61, 0x4fb040, 0x2cbbb5,
      0x553d0a, 0x63a7e2, 0x10341c, 0x48cf2e, 0x3564d7, 0x25bde4, 0x50c529, 0x468b4e, 0x2d518f,
      0x6de46, 0x7c84ad, 0x1cf5bb, 0x5ee355, 0x7,
    ],
    Frb: [
      0x76b481, 0x20ae5b, 0x570154, 0x6a4dac, 0x1047ef, 0x2bf5ff, 0x75d97a, 0x7682ae, 0x6bfd2e,
      0x681c72, 0x617359, 0x77460d, 0x7341ec, 0x42b2a4, 0xd16dd, 0x350bc3, 0x387677, 0x52a249,
      0x7921b9, 0x37b52, 0x630a44, 0x211caa, 0x38,
    ],
  };

  return ROM_FIELD_FP512BN;
};

ROM_FIELD_BN254 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BN254 = {
    // BN254 Modulus
    // Base Bits= 24
    Modulus: [0x13, 0x0, 0x13a700, 0x0, 0x210000, 0x861, 0x800000, 0xba344d, 0x1, 0x648240, 0x2523],
    ROI: [0x12, 0x0, 0x13a700, 0x0, 0x210000, 0x861, 0x800000, 0xba344d, 0x1, 0x648240, 0x2523],
    R2modp: [
      0x2f2aa7, 0x537047, 0xf8f174, 0xc3e364, 0xab8c1c, 0x3c2035, 0x69549, 0x379287, 0x3be629,
      0x75617a, 0x1f47,
    ],
    MConst: 0x9435e5,
    SQRTm3: [0x4, 0x0, 0x60c00, 0x0, 0xf0000, 0x3cf, 0x0, 0x26cd89, 0x1, 0x648240, 0x2523],
    CRu: [0x7, 0x0, 0x6cd80, 0x0, 0x90000, 0x249, 0x400000, 0x49b362, 0x0, 0x0, 0x0],
    Fra: [
      0x2a6de9, 0xe6c06f, 0xc2e17d, 0x4d3f77, 0x97492, 0x953f85, 0x50a846, 0xb6499b, 0x2e7c8c,
      0x761921, 0x1b37,
    ],
    Frb: [
      0xd5922a, 0x193f90, 0x50c582, 0xb2c088, 0x178b6d, 0x6ac8dc, 0x2f57b9, 0x3eab2, 0xd18375,
      0xee691e, 0x9eb,
    ],
  };

  return ROM_FIELD_BN254;
};

ROM_FIELD_BN254CX = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BN254CX = {
    // BN254CX Modulus
    // Base Bits= 24
    Modulus: [
      0x1b55b3, 0x23ef5c, 0xe1be66, 0x18093e, 0x3fd6ee, 0x66d324, 0x647a63, 0xb0bddf, 0x702a0d, 0x8,
      0x2400,
    ],
    ROI: [
      0x1b55b2, 0x23ef5c, 0xe1be66, 0x18093e, 0x3fd6ee, 0x66d324, 0x647a63, 0xb0bddf, 0x702a0d, 0x8,
      0x2400,
    ],
    R2modp: [
      0x8ee63d, 0x721fde, 0xcc0891, 0x10c28b, 0xd4f5a, 0x4c18fb, 0x9036fa, 0x3f845f, 0xa507e4,
      0x78eb29, 0x1587,
    ],
    MConst: 0x789e85,
    SQRTm3: [
      0xd49c84, 0xfdc033, 0x355aa4, 0x342a30, 0xc41825, 0xe8aaa2, 0x646112, 0x20bddf, 0x702a0d, 0x8,
      0x2400,
    ],
    CRu: [
      0x235c97, 0x931794, 0x5631e0, 0x71ef87, 0xbddf64, 0x3f1440, 0xca8, 0x480000, 0x0, 0x0, 0x0,
    ],
    Fra: [
      0xc80ea3, 0x83355, 0x215bd9, 0xf173f8, 0x677326, 0x189868, 0x8aaca7, 0xafe18b, 0x3a0164,
      0x82fa6, 0x1359,
    ],
    Frb: [
      0x534710, 0x1bbc06, 0xc0628d, 0x269546, 0xd863c7, 0x4e3abb, 0xd9cdbc, 0xdc53, 0x3628a9,
      0xf7d062, 0x10a6,
    ],
  };

  return ROM_FIELD_BN254CX;
};

ROM_FIELD_BRAINPOOL = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_BRAINPOOL = {
    // Brainpool modulus
    // Base Bits= 24
    Modulus: [
      0x6e5377, 0x481d1f, 0x282013, 0xd52620, 0x3bf623, 0x8d726e, 0x909d83, 0x3e660a, 0xeea9bc,
      0x57dba1, 0xa9fb,
    ],
    ROI: [
      0x6e5376, 0x481d1f, 0x282013, 0xd52620, 0x3bf623, 0x8d726e, 0x909d83, 0x3e660a, 0xeea9bc,
      0x57dba1, 0xa9fb,
    ],
    R2modp: [
      0x35b819, 0xb03428, 0xecaf0f, 0x3854a4, 0x4a0ed5, 0x2421ea, 0xaa562c, 0xf9c45, 0xddae58,
      0x4350fd, 0x52b8,
    ],
    MConst: 0xfd89b9,
  };
  return ROM_FIELD_BRAINPOOL;
};

ROM_FIELD_C41417 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_C41417 = {
    // C41417 modulus
    // Base Bits= 22
    Modulus: [
      0x3fffef, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff,
      0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff,
      0x3ffff,
    ],
    ROI: [
      0x3fffee, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff,
      0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff, 0x3fffff,
      0x3ffff,
    ],
    R2modp: [
      0x12100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0,
    ],
    MConst: 0x11,
  };
  return ROM_FIELD_C41417;
};

ROM_FIELD_C1174 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_C1174 = {
    // C1174 modulus
    // Base Bits= 24
    Modulus: [
      0xfffff7, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0x7ff,
    ],
    R2modp: [0x0, 0x144, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
    ROI: [
      0xfffff6, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0x7ff,
    ],
    MConst: 0x9,
  };
  return ROM_FIELD_C1174;
};

ROM_FIELD_C1665 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */
  var ROM_FIELD_C1665 = {
    // C1665 modulus
    // Base Bits= 23
    Modulus: [0x7ffffb, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x1f],
    R2modp: [0x0, 0x32000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
    ROI: [0x7ffffa, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x1f],
    MConst: 0x5,
  };
  return ROM_FIELD_C1665;
};

ROM_FIELD_MDC = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */
  var ROM_FIELD_MDC = {
    // Million Dollar Curve modulus
    // Base Bits= 24
    Modulus: [
      0x79ec13, 0x104057, 0x9ec137, 0xef07af, 0x6a9037, 0xfd4f08, 0xfdd7a5, 0x532f92, 0x56afb4,
      0x68b9d4, 0xf13b,
    ],
    R2modp: [
      0xfff702, 0x31619a, 0xba623e, 0xc672c1, 0xf5883f, 0x39e4ab, 0x4589, 0x972c4a, 0xd61255,
      0x6e22d, 0x7c41,
    ],
    ROI: [
      0x79ec12, 0x104057, 0x9ec137, 0xef07af, 0x6a9037, 0xfd4f08, 0xfdd7a5, 0x532f92, 0x56afb4,
      0x68b9d4, 0xf13b,
    ],
    MConst: 0xe541e5,
  };
  return ROM_FIELD_MDC;
};

ROM_FIELD_GOLDILOCKS = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_GOLDILOCKS = {
    // GOLDILOCKS modulus
    // Base Bits= 23
    Modulus: [
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7dffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7ff,
    ],
    ROI: [
      0x7ffffe, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7dffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7ff,
    ],
    R2modp: [
      0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0,
    ],
    MConst: 0x1,
  };
  return ROM_FIELD_GOLDILOCKS;
};

ROM_FIELD_HIFIVE = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_HIFIVE = {
    // HIFIVE modulus
    // Base Bits= 23
    Modulus: [
      0x7ffffd, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x3fff,
    ],
    ROI: [
      0x59d3b8, 0x104fea, 0xdae01, 0x49f563, 0x14538b, 0x2bb499, 0x7f2a2e, 0x30f6d4, 0x18c41f,
      0x2a7bef, 0x62cad1, 0x408fe1, 0x1ef527, 0x787c06, 0x3e4f,
    ],
    R2modp: [0x240000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
    MConst: 0x3,
  };
  return ROM_FIELD_HIFIVE;
};

ROM_FIELD_NIST256 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_NIST256 = {
    // NIST256 Modulus
    // Base Bits= 24
    Modulus: [0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x0, 0x0, 0x0, 0x0, 0x1, 0xffff00, 0xffff],
    ROI: [0xfffffe, 0xffffff, 0xffffff, 0xffffff, 0x0, 0x0, 0x0, 0x0, 0x1, 0xffff00, 0xffff],
    R2modp: [
      0x30000, 0x0, 0x0, 0xffff00, 0xfbffff, 0xffffff, 0xfffffe, 0xffffff, 0xfdffff, 0xffffff, 0x4,
    ],
    MConst: 0x1,
  };
  return ROM_FIELD_NIST256;
};

ROM_FIELD_SM2 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_SM2 = {
    // SM2 Modulus
    // Base Bits= 24
    Modulus: [
      0xffffff, 0xffffff, 0xffff, 0x0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffeff,
      0xffff,
    ],
    ROI: [
      0xfffffe, 0xffffff, 0xffff, 0x0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffeff,
      0xffff,
    ],
    R2modp: [0x30000, 0x0, 0x2, 0xffff00, 0x2ffff, 0x0, 0x1, 0x100, 0x20000, 0x0, 0x4],
    MConst: 0x1,
  };
  return ROM_FIELD_SM2;
};

ROM_FIELD_NIST384 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_NIST384 = {
    // NIST384 modulus
    // Base Bits= 23
    Modulus: [
      0x7fffff, 0x1ff, 0x0, 0x0, 0x7ffff0, 0x7fdfff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0xffff,
    ],
    ROI: [
      0x7ffffe, 0x1ff, 0x0, 0x0, 0x7ffff0, 0x7fdfff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0xffff,
    ],
    R2modp: [
      0x4000, 0x0, 0x7ffffe, 0x1ff, 0x80000, 0x0, 0x0, 0x7fc000, 0x3fffff, 0x0, 0x200, 0x20000, 0x0,
      0x0, 0x0, 0x0, 0x0,
    ],
    MConst: 0x1,
  };
  return ROM_FIELD_NIST384;
};

ROM_FIELD_NIST521 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_NIST521 = {
    // NIST521 modulus
    // Base Bits= 23
    Modulus: [
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fff,
    ],
    ROI: [
      0x7ffffe, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff,
      0x7fffff, 0x7fffff, 0x7fffff, 0x7fffff, 0x7fff,
    ],
    R2modp: [
      0x10000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
      0x0, 0x0, 0x0, 0x0, 0x0,
    ],
    MConst: 0x1,
  };
  return ROM_FIELD_NIST521;
};

ROM_FIELD_SECP256K1 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_SECP256K1 = {
    // SECP256K1 modulus
    // Base Bits= 24
    Modulus: [
      0xfffc2f, 0xfffeff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0xffff,
    ],
    ROI: [
      0xfffc2e, 0xfffeff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
      0xffffff, 0xffff,
    ],
    R2modp: [0xa10000, 0xe90, 0x7a2, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
    MConst: 0x253531,
    SQRTm3: [
      0xd5f852, 0x27ae1c, 0xd47d8d, 0xda14ec, 0x1f6d15, 0x962cc6, 0xc2a797, 0x233770, 0x7f1df,
      0x2ba935, 0xa2d,
    ],
  };
  return ROM_FIELD_SECP256K1;
};

ROM_FIELD_SECP160R1 = function () {
  'use strict';
  /* Fixed Data in ROM - Field and Curve parameters */

  var ROM_FIELD_SECP160R1 = {
    // SECP160R1 modulus
    // Base Bits= 24
    Modulus: [0xffffff, 0xffff7f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffff],
    R2modp: [0x10000, 0x0, 0x1, 0x40, 0x0, 0x0, 0x0],
    ROI: [0xfffffe, 0xffff7f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffff],
    MConst: 0x1,
  };
  return ROM_FIELD_SECP160R1;
};

ROM_FIELD_JUBJUB = function () {
  'use strict';
  // Fixed Data in ROM - Field and Curve parameters

  var ROM_FIELD_JUBJUB = {
    // Base Bits= 24
    Modulus: [
      0x1, 0xffff00, 0xfeffff, 0xfffe5b, 0xbda402, 0xd80553, 0x809a1, 0x3339d8, 0x9d7d48, 0xa75329,
      0x73ed,
    ],
    R2modp: [
      0x6cefea, 0x4089c, 0xafe991, 0x7687f1, 0x3f3f50, 0x45bbe1, 0x94826, 0x101d61, 0xb3be6b,
      0xb9a93, 0x8f8,
    ],
    ROI: [
      0x912f1f, 0x8f500b, 0x941b78, 0x70b3e0, 0x24ff2, 0xd6c0c4, 0xc8d168, 0xfd56d, 0x416b6f,
      0xd79e5b, 0x212,
    ],
    MConst: 0xffffff,
  };
  return ROM_FIELD_JUBJUB;
};

ROM_FIELD_TWEEDLEDUM = function () {
  'use strict';
  // Fixed Data in ROM - Field and Curve parameters

  var ROM_FIELD_TWEEDLEDUM = {
    // Base  bits= 24
    Modulus: [0x1, 0x64e200, 0xb9a140, 0x6c3f59, 0x8aa127, 0x3, 0x0, 0x0, 0x0, 0x0, 0x4000],
    R2modp: [
      0xffcde, 0xf3fc00, 0x817083, 0x90fd10, 0x4e767f, 0x919928, 0x94c659, 0x28e190, 0xedd7b,
      0x7ccca, 0x2d91,
    ],
    ROI: [
      0x8837ce, 0x9f31b8, 0xd653de, 0xf3ea99, 0x46e8f3, 0x2d57ff, 0xeaaf8c, 0xf624f2, 0xee2fc,
      0x511789, 0x2ae4,
    ],
    SQRTm3: [
      0xde6c70, 0xd7ab7, 0x6c960f, 0x34f725, 0x86aae0, 0x84cb12, 0xd7220f, 0xc8286d, 0x2d06d6,
      0x7d4a94, 0x15ef,
    ],
    MConst: 0xffffff,
  };
  return ROM_FIELD_TWEEDLEDUM;
};

ROM_FIELD_TWEEDLEDEE = function () {
  'use strict';
  // Fixed Data in ROM - Field and Curve parameters

  var ROM_FIELD_TWEEDLEDEE = {
    // Base  bits= 24
    Modulus: [0x1, 0xafd400, 0xc9842c, 0x696286, 0x8aa127, 0x3, 0x0, 0x0, 0x0, 0x0, 0x4000],
    R2modp: [
      0xffcde, 0x29d800, 0x45e681, 0x2b8642, 0x18e911, 0x7e0b8d, 0x3aa0a2, 0xe6fcb0, 0x13f4c0,
      0x68860, 0x2d91,
    ],
    ROI: [
      0x9d57ec, 0x323486, 0xbf1cbd, 0xb8084f, 0x287dd1, 0x72930a, 0x645a98, 0xf1dbcb, 0xc03c0b,
      0xfc510d, 0x113e,
    ],
    SQRTm3: [
      0x1f49fa, 0xd5a629, 0xb902fc, 0xd867d6, 0x147aa6, 0x3ffcd0, 0xbff2e6, 0xf5b16, 0x934b1,
      0xda743c, 0x2d8c,
    ],
    MConst: 0xffffff,
  };
  return ROM_FIELD_TWEEDLEDEE;
};

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = {
    ROM_FIELD_25519: ROM_FIELD_25519,
    ROM_FIELD_256PM: ROM_FIELD_256PM,
    ROM_FIELD_384PM: ROM_FIELD_384PM,
    ROM_FIELD_512PM: ROM_FIELD_512PM,
    ROM_FIELD_ANSSI: ROM_FIELD_ANSSI,
    ROM_FIELD_FP256BN: ROM_FIELD_FP256BN,
    ROM_FIELD_FP512BN: ROM_FIELD_FP512BN,
    ROM_FIELD_BN254: ROM_FIELD_BN254,
    ROM_FIELD_BN254CX: ROM_FIELD_BN254CX,
    ROM_FIELD_BRAINPOOL: ROM_FIELD_BRAINPOOL,
    ROM_FIELD_C41417: ROM_FIELD_C41417,
    ROM_FIELD_GOLDILOCKS: ROM_FIELD_GOLDILOCKS,
    ROM_FIELD_HIFIVE: ROM_FIELD_HIFIVE,
    ROM_FIELD_NIST256: ROM_FIELD_NIST256,
    ROM_FIELD_NIST384: ROM_FIELD_NIST384,
    ROM_FIELD_NIST521: ROM_FIELD_NIST521,
    ROM_FIELD_SECP256K1: ROM_FIELD_SECP256K1,
    ROM_FIELD_BLS12383: ROM_FIELD_BLS12383,
    ROM_FIELD_BLS24479: ROM_FIELD_BLS24479,
    ROM_FIELD_BLS48556: ROM_FIELD_BLS48556,
    ROM_FIELD_BLS48286: ROM_FIELD_BLS48286,
    ROM_FIELD_BLS48581: ROM_FIELD_BLS48581,
    ROM_FIELD_BLS12381: ROM_FIELD_BLS12381,
    ROM_FIELD_BLS12461: ROM_FIELD_BLS12461,
    ROM_FIELD_BN462: ROM_FIELD_BN462,
    ROM_FIELD_C1174: ROM_FIELD_C1174,
    ROM_FIELD_C1665: ROM_FIELD_C1665,
    ROM_FIELD_MDC: ROM_FIELD_MDC,
    ROM_FIELD_SECP160R1: ROM_FIELD_SECP160R1,
    ROM_FIELD_SM2: ROM_FIELD_SM2,
    ROM_FIELD_JUBJUB: ROM_FIELD_JUBJUB,
    ROM_FIELD_TWEEDLEDUM: ROM_FIELD_TWEEDLEDUM,
    ROM_FIELD_TWEEDLEDEE: ROM_FIELD_TWEEDLEDEE,
  };
}
