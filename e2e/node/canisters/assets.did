service : {
  get: (record {
    key: text;
    accept_encodings: vec text;
  }) -> (record {
    content: blob;
    content_type: text;
    content_encoding: text;
    total_length: nat;
    sha256: opt blob;
  }) query;
  list : () -> (vec record {
    key: text;
    content_type: text;
    encodings: vec record {
      content_encoding: text;
      sha256: opt blob;
      length: nat;
    };
  }) query;
  create_batch : () -> (nat);
  create_chunk : (record {
    batch_id: nat;
    content: blob;
  }) -> (nat);
  commit_batch : (record {
    batch_id: nat;
    operations: vec record {
      operation_type: variant {
        SetAsset: record {
          key: text;
          content_type: text;
          sha256: opt blob;
          encodings: vec record {
            content_encoding: text;
            sha256: opt blob;
            length: nat;
          };
        };
        UnsetAsset: record {
          key: text;
        };
        Clear: null;
      };
    };
  }) -> ();
  http_request: (record {
    method: text;
    url: text;
    headers: vec record { name: text; value: text };
    body: blob;
  }) -> (record {
    status_code: nat16;
    headers: vec record { name: text; value: text };
    body: blob;
    streaming_strategy: opt variant {
      Callback: record {
        callback: func (record { key: text; content_encoding: text; index: nat; sha256: opt blob }) -> (record { body: blob; token: opt record { key: text; content_encoding: text; index: nat; sha256: opt blob } }) query;
        token: record { key: text; content_encoding: text; index: nat; sha256: opt blob };
      };
    };
  }) query;
  http_request_streaming_callback: (record {
    key: text;
    content_encoding: text;
    index: nat;
    sha256: opt blob;
  }) -> (record {
    body: blob;
    token: opt record {
      key: text;
      content_encoding: text;
      index: nat;
      sha256: opt blob;
    };
  }) query;
}
